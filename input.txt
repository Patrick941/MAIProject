class Node:
    def __init__(self, value):
        self.value = value
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def add_begin(self, value):
        new_node = Node(value)
        if not self.head:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node

    def add_end(self, value):
        new_node = Node(value)
        if not self.head:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.prev = self.tail
            self.tail.next = new_node
            self.tail = new_node

    def insert_after(self, target_value, value):
        current = self.head
        while current:
            if current.value == target_value:
                new_node = Node(value)
                next_node = current.next
                current.next = new_node
                new_node.prev = current
                if next_node:
                    new_node.next = next_node
                    next_node.prev = new_node
                else:
                    self.tail = new_node
                return
            current = current.next

    def delete(self, value):
        current = self.head
        while current:
            if current.value == value:
                prev_node = current.prev
                next_node = current.next
                if prev_node:
                    prev_node.next = next_node
                else:
                    self.head = next_node
                if next_node:
                    next_node.prev = prev_node
                else:
                    self.tail = prev_node
                return
            current = current.next

    def search(self, value):
        current = self.head
        while current:
            if current.value == value:
                print("Found")
                return
            current = current.next
        print("Not Found")

    def print_list(self):
        current = self.head
        output = []
        while current:
            output.append(str(current.value))
            current = current.next
        print(" -> ".join(output))

def main():
    import sys
    input = sys.stdin.read().split()
    dll = DoublyLinkedList()
    index = 0
    while index < len(input):
        command = input[index]
        if command == 'add_begin':
            value = input[index + 1]
            dll.add_begin(value)
            index += 2
        elif command == 'add_end':
            value = input[index + 1]
            dll.add_end(value)
            index += 2
        elif command == 'insert_after':
            target = input[index + 1]
            value = input[index + 2]
            dll.insert_after(target, value)
            index += 3
        elif command == 'delete':
            value = input[index + 1]
            dll.delete(value)
            index += 2
        elif command == 'search':
            value = input[index + 1]
            dll.search(value)
            index += 2
        elif command == 'print':
            dll.print_list()
            index += 1

if __name__ == "__main__":
    main()
